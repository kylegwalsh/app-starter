name: App CI
# Prevent multiple jobs from running at the same time and cancel in-progress runs
concurrency:
  group: ci-${{ github.event_name == 'release' && 'release' || github.ref }}
  # Disable cancelling in-progress runs because sst will lock a deploy, preventing the subsequent deploy from succeeding
  cancel-in-progress: false
on:
  # Run on push to main (dev deployment)
  push:
    branches: [main]
  # Run on release (prod deployment)
  release:
    types: [published]

# Global environment variables
env:
  AWS_REGION: us-east-1
  SST_STAGE: ${{ vars.SST_STAGE }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  POSTHOG_CLI_ENV_ID: ${{ vars.POSTHOG_CLI_ENV_ID }}
  POSTHOG_CLI_TOKEN: ${{ secrets.POSTHOG_CLI_TOKEN }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  DIRECT_DATABASE_URL: ${{ secrets.DIRECT_DATABASE_URL }}
  GITHUB_REPO: ${{ github.repository }}
  GITHUB_SHA: ${{ github.sha }}

# The different jobs to run
jobs:
  # ------------- START SETUP -------------
  # Base setup job that installs and caches dependencies (to be re-loaded by our composite setup action)
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      # Basic setup steps
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      # Cache dependencies
      - name: Set up cache for dependencies
        uses: actions/cache@v4
        id: cache-deps
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}

      # Install dependencies
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --ignore-scripts

      # Cache Playwright browsers
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: cache-playwright-browsers
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-browsers
          restore-keys: |
            ${{ runner.os }}-playwright-browsers

      # Install Playwright browsers
      - name: Install Playwright browsers
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
        run: npx playwright install chromium --with-deps

      # Cache SST providers
      - name: Cache SST providers
        uses: actions/cache@v4
        id: cache-sst-providers
        with:
          path: .sst
          key: ${{ runner.os }}-sst-providers
          restore-keys: |
            ${{ runner.os }}-sst-providers

      # If we didn't get a cache hit, it means we haven't set up SST in our CI yet
      - name: Setup CI stage
        if: steps.cache-sst-providers.outputs.cache-hit != 'true'
        run: |
          pnpm run backend db:generate
          pnpm run docs postinstall
          SKIP_SOURCEMAPS=true pnpm exec sst deploy --stage ci

  # ------------- START TESTING -------------
  # Lint packages for errors and formatting
  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: setup
    environment: ${{ github.event_name == 'release' && 'prod' || 'dev' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment
        uses: ./.github/actions/setup
        with:
          job-name: lint

      - name: Run lint
        run: pnpm lint

  # Check for type errors
  typecheck:
    name: Check types
    runs-on: ubuntu-latest
    needs: setup
    environment: ${{ github.event_name == 'release' && 'prod' || 'dev' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment
        uses: ./.github/actions/setup
        with:
          job-name: typecheck

      - name: Run type check
        run: pnpm types:check

  # Run our standard tests
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: setup
    environment: ${{ github.event_name == 'release' && 'prod' || 'dev' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment
        uses: ./.github/actions/setup
        with:
          job-name: test

      - name: Run tests
        run: pnpm test:ci

  # Run our E2E tests (only run on releases)
  e2e:
    name: E2E Test
    runs-on: ubuntu-latest
    needs: setup
    environment: ${{ github.event_name == 'release' && 'prod' || 'dev' }}
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment
        uses: ./.github/actions/setup
        with:
          job-name: e2e

      # Cache NextJS build
      - name: Cache NextJS build
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/apps/web/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('apps/web/**/*.[jt]s?(x)') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

      # Cache SST artifacts for CI environment (used for e2e tests)
      - name: Cache SST CI artifacts
        uses: actions/cache@v4
        with:
          path: .sst
          key: ${{ runner.os }}-sst-ci-${{ hashFiles('sst.config.ts', 'infra/**/*.ts') }}
          restore-keys: |
            ${{ runner.os }}-sst-ci-

      # Deploy the "ci" environment for running E2E tests
      - name: Deploy app
        run: |
          pnpm exec sst unlock --stage ci
          SKIP_SOURCEMAPS=true pnpm exec sst deploy --stage ci

      - name: Run E2E tests
        run: pnpm web test:e2e

      # Upload artifacts to see results
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: apps/web/playwright-report/
          retention-days: 30

      - name: Upload Playwright screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-screenshots
          path: apps/web/test-results/
          retention-days: 30

  # Deploy job that waits for all checks to pass
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test, e2e]
    environment: ${{ github.event_name == 'release' && 'prod' || 'dev' }}
    if: always() && (needs.lint.result == 'success' && needs.typecheck.result == 'success' && needs.test.result == 'success') && (github.event_name != 'release' || needs.e2e.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment
        uses: ./.github/actions/setup
        with:
          job-name: deploy

      # Cache NextJS build
      - name: Cache NextJS build
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/apps/web/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('apps/web/**/*.[jt]s?(x)') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

      # Cache SST artifacts for dev environment
      - name: Cache SST dev artifacts
        uses: actions/cache@v4
        if: github.event_name != 'release'
        with:
          path: .sst
          key: ${{ runner.os }}-sst-dev-${{ hashFiles('sst.config.ts', 'infra/**/*.ts') }}
          restore-keys: |
            ${{ runner.os }}-sst-dev-

      # Cache SST artifacts for prod environment
      - name: Cache SST prod artifacts
        uses: actions/cache@v4
        if: github.event_name == 'release'
        with:
          path: .sst
          key: ${{ runner.os }}-sst-prod-${{ hashFiles('sst.config.ts', 'infra/**/*.ts') }}
          restore-keys: |
            ${{ runner.os }}-sst-prod-

      # ------------- START DEPLOYMENT -------------
      # Deploy main apps using sst
      - name: Deploy app
        run: |
          pnpm exec sst unlock
          pnpm exec sst deploy

      # Update database using prisma
      - name: Update database
        run: pnpm backend exec prisma db push --skip-generate --accept-data-loss

      # Upload sourcemaps to PostHog (the source maps for web are handled by the next.config.ts file)
      - name: Upload remaining sourcemaps to PostHog
        if: env.POSTHOG_CLI_ENV_ID && env.POSTHOG_CLI_TOKEN
        run: |
          pnpm exec posthog-cli sourcemap inject --directory .sst/artifacts
          pnpm exec posthog-cli sourcemap upload --directory .sst/artifacts --project "${{ github.repository }} (backend)" --version ${{ github.sha }}
