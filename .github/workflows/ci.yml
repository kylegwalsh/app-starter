# name: App CI
# # Prevent multiple jobs from running at the same time and cancel in-progress runs
# concurrency:
#   group: ci-${{ github.ref }}
#   # Disable cancelling in-progress runs because sst will lock a deploy, preventing the subsequent deploy from succeeding
#   cancel-in-progress: false
# on:
#   push:
#     branches:
#       - "main"
#       - "dev"
# # Global environment variables
# env:
#   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#   AWS_REGION: us-east-1
#   BEFORE_SHA: ${{ github.event.before }}
#   POSTHOG_CLI_ENV_ID: ${{ secrets.POSTHOG_CLI_ENV_ID }}
#   POSTHOG_CLI_TOKEN: ${{ secrets.POSTHOG_CLI_TOKEN }}
#   GITHUB_SHA: ${{ github.sha }}
#   GITHUB_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
# # The different jobs to run
# jobs:
#   # Perform the actual build / deployment
#   deploy:
#     name: Deploy apps
#     # Machine to run job on
#     runs-on: ubuntu-latest
#     # Actual job steps
#     steps:
#       # ------------- START STANDARD SETUP -------------
#       # Checks out latest code
#       - name: Checkout code
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 2
#           submodules: recursive

#       # Setup the node environment
#       - name: Setup node
#         uses: actions/setup-node@v3
#         with:
#           node-version: "18"
#           cache: "yarn"

#       # Install all dependencies
#       - name: Install dependencies
#         run: yarn install --immutable
#       # ------------- END STANDARD SETUP -------------

#       # ------------- START EXTENDED SETUP -------------
#       # Set the environment based on branch name
#       - name: Set stage (dev)
#         if: endsWith(github.ref, '/dev')
#         run: |
#           echo "STAGE=dev" >> $GITHUB_ENV
#           echo "DATABASE_URL=${{ secrets.DATABASE_URL_DEV }}" >> $GITHUB_ENV
#           echo "DIRECT_DATABASE_URL=${{ secrets.DATABASE_URL_DEV }}" >> $GITHUB_ENV
#       - name: Set stage (prod)
#         if: endsWith(github.ref, '/main')
#         run: |
#           echo "STAGE=prod" >> $GITHUB_ENV
#           echo "DATABASE_URL=${{ secrets.DATABASE_URL_PROD }}" >> $GITHUB_ENV
#           echo "DIRECT_DATABASE_URL=${{ secrets.DATABASE_URL_PROD }}" >> $GITHUB_ENV

#       # Write any env variables that the backend needs to a .env file
#       - name: Write to .env
#         run: |
#           touch .env
#           echo "STAGE=$STAGE" >> .env

#       # Add AWS CLI for deployments
#       - name: Configure AWS CLI
#         run: |
#           aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile default
#           aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile default
#           aws configure set default.region us-east-1

#       # Generate the database schema types (they will be checked during the linting process)
#       - name: Generate database types
#         run: yarn db:generate

#       # Restore cache to speed up site build speed
#       - name: Load NextJS build cache
#         uses: actions/cache@v4
#         with:
#           path: ${{ github.workspace }}/apps/frontend/.next/cache
#           # Generate a new cache whenever packages or source files change.
#           key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('apps/frontend/**/*.[jt]s?(x)') }}
#           # If source files changed but packages didn't, rebuild from a prior cache.
#           restore-keys: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-
#       # ------------- END EXTENDED SETUP -------------

#       # ------------- START LINT -------------
#       - name: Lint
#         run: yarn lint:ci
#       # ------------- END LINT -------------

#       # ------------- START DEPLOYMENT -------------
#       # Deploy our actual application (handled by backend package)
#       - name: Deploy app
#         run: yarn deploy:ci
#       # ------------- END DEPLOYMENT -------------
