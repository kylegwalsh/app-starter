import { resources } from './cloud-resources';
import { env } from './env';

// ---------- HELPERS ----------
/** Determine which stage (environment the app is running in) */
const stage =
  // The backend uses env?.STAGE (generated by sst)
  env?.STAGE ||
  // The frontend (deployed) uses NEXT_PUBLIC_STAGE (set inside website stack)
  process.env.NEXT_PUBLIC_STAGE;

// If we still don't have stage, something went wrong
if (!stage) throw new Error('[config] Stage not found - check your environment variables.');

/** Whether we're running against production resources */
let isProd = false;
// Prod should both use prod resources
if (stage === 'prod' || stage === 'staging') {
  isProd = true;
}

/** The URL of our web app */
let appUrl: string | undefined;
declare const window: any; // eslint-disable-line
if (typeof window !== 'undefined') appUrl = window.location.origin; // eslint-disable-line
if (!appUrl) {
  try {
    appUrl = resources?.web?.url?.includes?.('dev.mode')
      ? 'http://localhost:3000'
      : resources?.web?.url;
  } catch {}
}

/** The URL of our API */
let apiUrl = '';
try {
  apiUrl = process.env.NEXT_PUBLIC_API_URL ?? resources?.api?.url ?? '';
} catch {}

/** Whether this application is running as one of our main deployments (not locally) */
const isDeployment = ['prod', 'dev'].includes(stage ?? '');

// ---------- MAIN CONFIG ----------
/** The configuration object that defines global settings for the app */
export const config = {
  /** The overall stage the application is running in */
  stage,
  /** Whether this application is running as one of our main deployments (not locally) */
  isDeployment,
  /** Whether we're running in an AWS deployment */
  isAWS: !!(process?.env?.LAMBDA_TASK_ROOT || process?.env?.AWS_EXECUTION_ENV),
  /** Whether the application is using production resources */
  isProd,
  /** Some details regarding the project */
  app: {
    /** The name of the project */
    name: 'My App',
    /** The url of the project (found differently for frontend and backend) */
    url: appUrl,
  },
  /** Details for our backend API */
  api: {
    /** The URL of our own API (found differently for frontend and backend) */
    url: apiUrl,
  },
  /** The configuration for PostHog (our analytics system) */
  posthog: {
    /** Whether posthog is enabled */
    isEnabled: isDeployment,
    /** The PostHog API key */
    apiKey: isProd
      ? 'phc_LE5qHtqyJtBrzG4vRkfTY5OKmc3bBhEf7u8OEPyneCD'
      : 'phc_xKfOXqc9QAqX5E1KIepSG9EcG2FddQWvupGTvogQ0AH',
  },
  /** The configuration for crisp (our chat system) */
  crisp: {
    /** The crisp chat website ID */
    websiteId: '',
  },
  /** The configuration for our Loops (our email system) */
  loops: {
    /** The transactional emails we support */
    transactional: {
      /** The transactional email for reset password */
      resetPassword: 'cmddvjz0v1hmexb0inad4bz0h',
    },
  },
  /** The configuration for Stripe (our payment system) */
  stripe: {
    /** The Stripe publishable key */
    publishableKey: isProd
      ? ''
      : 'pk_test_51Rr8XGF1kcHuFeSjRYuUsOPbO4vHqodx3ilCrCzk18ijECQFqbo5N29ZwLU9gaFmEkto0b0OyoqLAjlcnEygxf3M00a89ydOqu',
  },
};
